fabric.Image.filters.BaseFilter

构造函数：new BaseFilter()
说明：这是所有过滤器的基类

类属性成员：
type(String)：过滤器类型，默认值为"BaseFilter"。

类函数成员：
void initialize(Object opt)：构造函数，参数为可选，传递一些过滤器选项。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。
	



fabric.Image.filters.Brightness

构造函数：new Brightness()
示例：
var filter = new fabric.Image.filters.Brightness({
  brightness: 200
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Brightness"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object中包含brightness成员，Number类型，取值范围为[0,255]，表示图像的亮度值。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。




fabric.Image.filters.Convolute

构造函数：new Convolute()
参考文章：http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
示例：
锐化
var filter = new fabric.Image.filters.Convolute({
  matrix: [ 0, -1,  0,
           -1,  5, -1,
            0, -1,  0 ]
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

模糊化
var filter = new fabric.Image.filters.Convolute({
  matrix: [ 1/9, 1/9, 1/9,
            1/9, 1/9, 1/9,
            1/9, 1/9, 1/9 ]
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

浮雕效果
var filter = new fabric.Image.filters.Convolute({
  matrix: [ 1,   1,  1,
            1, 0.7, -1,
           -1,  -1, -1 ]
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

不透明浮雕效果
var filter = new fabric.Image.filters.Convolute({
  opaque: true,
  matrix: [ 1,   1,  1,
            1, 0.7, -1,
           -1,  -1, -1 ]
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Convolute"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object包含成员如下：
参数名	参数类型	是否可选	说明
options	Object	是	选项对象，包含属性：
名称	类型	是否可选	默认值	说明
opaque	boolean	可选	false	是否不透明（true/false）
matrix	Array			过滤器矩阵


void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。






fabric.Image.filters.GradientTransparency

构造函数：new GradientTransparency()
示例：
var filter = new fabric.Image.filters.GradientTransparency({
  threshold: 200
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"GradientTransparency"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object中包含threshold成员，Number类型，可选，渐变阈值，默认为100。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。



fabric.Image.filters.GrayScale

构造函数：new GrayScale()
示例：
var filter = new fabric.Image.filters.Grayscale();
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"GrayScale"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。



fabric.Image.filters.Invert

构造函数：new Invert()
示例：
var filter = new fabric.Image.filters.Invert();
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Invert"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。



fabric.Image.filters.Mask

构造函数：new Mask()

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Mask"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object包含成员如下：
参数名	参数类型	是否可选	说明
options	Object	是	选项对象，包含属性：
名称	类型	是否可选	默认值	说明
mask	fabric.Image	可选		遮罩图像
channel	Number	可选	0	RGB通道（0、1、2或3）


void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。


fabric.Image.filters.Noise

构造函数：new Noise()
示例：
var filter = new fabric.Image.filters.Noise({
  noise: 700
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Noise"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object中包含noise成员，Number类型，可选，噪声值，默认为0。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。



fabric.Image.filters.Pixelate

构造函数：new Pixelate()
示例：
var filter = new fabric.Image.filters.Pixelate({
  blocksize: 8
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Pixelate"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object中包含blocksize成员，Number类型，可选，马塞克块的尺寸，默认为4。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。



fabric.Image.filters.RemoveWhite

构造函数：new RemoveWhite()
示例：
var filter = new fabric.Image.filters.RemoveWhite({
  threshold: 40,
  distance: 140
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"RemoveWhite"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object包含成员如下：
参数名	参数类型	是否可选	说明
options	Object	是	选项对象，包含属性：
名称	类型	是否可选	默认值	说明
threshold	Number	可选	30	白点阈值
distance	Number	可选	20	白点距离


void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。




fabric.Image.filters.Sepia

构造函数：new Sepia()
示例：
var filter = new fabric.Image.filters.Sepia();
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Sepia"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。



fabric.Image.filters.Sepia2

构造函数：new Sepia2()
示例：
var filter = new fabric.Image.filters.Sepia2();
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

父类：fabric.Image.filters.BaseFilter

类属性成员：
type(String)：过滤器类型，默认值为"Sepia2"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选。
void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。



fabric.Image.filters.Tint

构造函数：new Tint()
参考网址：https://github.com/mezzoblue/PaintbrushJS
示例：
使用十六进制颜色和透明度染色：
var filter = new fabric.Image.filters.Tint({
  color: '#3513B0',
  opacity: 0.5
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

使用rgba表示进行染色：
var filter = new fabric.Image.filters.Tint({
  color: 'rgba(53, 21, 176, 0.5)'
});
object.filters.push(filter);
object.applyFilters(canvas.renderAll.bind(canvas));

类属性成员：
type(String)：过滤器类型，默认值为"Tint"。

类函数成员：
void applyTo(Object)：将过滤器应用于Canvas元素。参数为指定的Canvas元素。
void initialize(Object opt)：构造函数，参数为可选，Object包含成员如下：
参数名	参数类型	是否可选	说明
options	Object	是	选项对象，包含属性：
名称	类型	是否可选	默认值	说明
color	String	可选	#000000	渲染的颜色
opacity	Number	可选	20	渲染透明度，取值范围(0,1)


void setOptions(Object opt)：为过滤器设置相关属性，参数可选。
Object toJSON()：返回代表该过滤器的JSON对象。
Object toObject()：返回代表该过滤器的Object对象。







