方法一：构造函数法
这个方法是比较经典的方法，我们会经常见到。生成实例的时候，使用new关键字。类的属性和方法，
还可以定义在构造函数的prototype对象之上。

function Person(name,age,job){
    this.name=name;
    this.age=age;
    this.job=job;
}

Person.prototype.sayName=function(){
    alert(this.name);
}

var person1 = new Person("张三","29","web frontpage manager");
var person2 = new Person("李四","22","doctor");

方法二：Object.create()法
方法Object.creat()作为new操作符的替代方案是ES5之后才出来的。用这个方法，"类"就是一个对象，不是函数。

var myMammal = {
    name : 'Herb the Mammal',
    get_name : function () {
        return this.name;
    },
    says : function () {
        return this.saying || '';
    }
}

var myCat = Object.create(myMammal);
myCat.name = 'Henrietta';
myCat.saying = 'meow';
myCat.get_name = function () {
   console.log(this.says + ' ' + this.name + this.says);
}

myCat.get_name();
目前，各大浏览器的最新版本（包括IE9）都部署了这个方法。如果遇到老式浏览器，可以用下面的代码自行部署。

　　if (!Object.create) {
　　　　Object.create = function (o) {
　　　　　　 function F() {}
　　　　　　F.prototype = o;
　　　　　　return new F();
　　　　};
　　}

方法三：极简主义法
封装

这种方法不使用this和prototype，代码部署起来非常简单。 首先，它也是用一个对象模拟"类"。在这个类里面，定义一个构造函数creatFn()，用来生成实例。

　　var Dog= {
　　　　creatFn: function(){
　　　　　　// some code here
　　　　}
　　};
然后，在creatFn()里面，定义一个实例对象，把这个实例对象作为返回值。

　　var Dog= {
　　　　creatFn: function(){
　　　　　　var dog= {};
　　　　　　dog.name = "狗狗";
　　　　　　dog.makeSound = function(){ alert("汪汪汪"); };
　　　　　　return dog;
　　　　}
　　};
使用的时候，调用creatFn()方法，就可以得到实例对象。

　　var dog1 = Dog.creatFn();
　　dog1.makeSound(); // 汪汪汪
这种方法的好处是，容易理解，结构清晰优雅，符合传统的"面向对象编程"的构造，因此可以方便地部署下面的特性。